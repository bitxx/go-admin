{{- $hasDict := false }}
{{- $hasInput := false }}
{{- $hasNumInput := false }}
{{- $hasDatetime := false }}
{{- $hasSelect := false }}
{{- $hasRadio := false }}
{{- range .SysGenColumns }}
{{- if eq .IsRequired "1" }}
{{- if ne .DictType ""  }}{{ $hasDict = true }}{{- end }}
{{- if eq "input" .HtmlType }}{{ $hasInput = true }}{{- end }}
{{- if eq "numInput" .HtmlType }}{{ $hasNumInput = true }}{{- end }}
{{- if eq "datetime" .HtmlType }}{{ $hasDatetime = true }}{{- end }}
{{- if eq "select" .HtmlType }}{{ $hasSelect = true }}{{- end }}
{{- if eq "radio" .HtmlType }}{{ $hasRadio = true }}{{- end }}
{{- end }}
{{- end }}
{{- if eq $hasDict true }}
import { getDictOptions, getDictsApi } from "@/api/admin/sys/sys-dictdata";
{{- end }}
import { add{{.ClassName}}Api, {{.ClassName}}Model, get{{.ClassName}}Api, update{{.ClassName}}Api } from "@/api/{{.PackageName}}/{{.BusinessName}}/{{.ModuleName}}";
import LoadingButton from "@/components/LoadingButton";
import { ResultEnum } from "@/enums/httpEnum";
import { message } from "@/hooks/useMessage";
import { Form, Modal{{ if eq $hasInput true }}, Input{{ end }}{{ if eq $hasNumInput true }}, InputNumber{{ end }}{{ if eq $hasDatetime true }}, DatePicker{{ end }}{{ if eq $hasSelect true }}, Select{{ end }}{{ if eq $hasRadio true }}, Radio{{ end }} } from "antd";
import { forwardRef, useImperativeHandle, useState{{ if eq $hasDict true }}, useEffect{{ end }} } from "react";

export interface FormModalRef {
  showAddFormModal: () => void;
  showEditFormModal: (id: number) => void;
}

interface ModalProps {
  onConfirm: () => void;
}

const FormModal = forwardRef<FormModalRef, ModalProps>(({ onConfirm }, ref) => {
  const [form] = Form.useForm();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [model, setModel] = useState<{{.ClassName}}Model>({});
  {{- range .SysGenColumns }}
  {{- if and (eq .IsRequired "1") (ne .DictType "" ) }}
  const [{{.JsonField}}Options, set{{.GoField}}Options] = useState<Map<string, string>>(new Map());
  {{- end }}
  {{- end }}

  useImperativeHandle(ref, () => ({
    showAddFormModal() {
      reset();
      setIsModalOpen(true);
    },
    async showEditFormModal(id: number) {
      const { data, msg, code } = await get{{.ClassName}}Api(id);
      if (code !== ResultEnum.SUCCESS) {
        message.error(msg);
        return;
      }
      setModel(data);
      form.setFieldsValue(data);
      setIsModalOpen(true);
    }
  }));
{{- if eq $hasDict true }}
  useEffect(() => {
    const getDict = async () => {
      {{- range .SysGenColumns}}
      {{- if and (ne .DictType "") (eq .IsRequired "1") }}
      const {
        data: {{.JsonField}}Data,
        msg: {{.JsonField}}Msg,
        code: {{.JsonField}}Code
      } = await getDictsApi("{{.DictType}}");
      if ({{.JsonField}}Code !== ResultEnum.SUCCESS) {
        message.error({{.JsonField}}Msg);
        return;
      }
      set{{.GoField}}Options(getDictOptions({{.JsonField}}Data));
      {{- end }}
      {{- end }}
    }
    getDict();
  }, []);
  {{- end }}


  const reset = () => {
    if (model.id! > 0) {
      setModel({});
    } else {
      setModel({ id: 0 });
    }
    setTimeout(() => form.resetFields(), 100);
  };

  const handleConfirm = (done: () => void) => {
    form
      .validateFields()
      .then(async values => {
        try {
          if (model.id! <= 0) {
            const { msg, code } = await add{{.ClassName}}Api(values);
            if (code !== ResultEnum.SUCCESS) {
              message.error(msg);
              return;
            }
            message.success(msg);
          } else {
            const { msg, code } = await update{{.ClassName}}Api(model.id!, values);
            if (code !== ResultEnum.SUCCESS) {
              message.error(msg);
              return;
            }
            message.success(msg);
          }
        } finally {
          done();
        }
        reset();
        setIsModalOpen(false);
        onConfirm();
      })
      .catch(error => {
        console.error("validate error：", error);
        message.error("表单校验失败");
        done();
      });
  };

  return (
    <Modal
      title={model.id! > 0 ? "编辑" : "新增"}
      getContainer={false}
      width={500}
      open={isModalOpen}
      maskClosable={false}
      keyboard={false}
      onCancel={() => {
        reset();
        setIsModalOpen(false);
      }}
      destroyOnHidden
      footer={[
        <LoadingButton
          key="cancel"
          onClick={(done) => {
            reset();
            setIsModalOpen(false);
            done();
          }}
        >
          取消
        </LoadingButton>,
        <LoadingButton key="confirm" type="primary" onClick={done => handleConfirm(done)}>
          确定
        </LoadingButton>
      ]}
    >
      <Form form={form} layout="vertical" initialValues={model}>
        {{- range .SysGenColumns }}
        {{- if eq .IsRequired "1" }}
        <Form.Item name="{{.JsonField}}" label="{{.ColumnComment}}" rules={[{ required: true, message: "请输入{{.ColumnComment}}" }]}>
          {{- if eq "input" .HtmlType }}
          <Input placeholder="请输入{{.ColumnComment}}" />
          {{- else if eq "textarea" .HtmlType }}
          <Input.TextArea placeholder="请输入{{.ColumnComment}}" />
          {{- else if eq "numInput" .HtmlType }}
          <InputNumber style={{ "{{" }} width: "100%" {{ "}}" }} min={0} />
          {{- else if eq "datetime" .HtmlType }}
          <DatePicker showTime />
          {{- else if and (ne .DictType "") (eq "select" .HtmlType) }}
          <Select placeholder="请选择">
            {{ "{" }}Array.from({{.JsonField}}Options).map(([dictValue, dictLabel]) => (
              <Select.Option key={dictValue} value={dictValue}>
                {dictLabel}
              </Select.Option>
            )){{ "}" }}
          </Select>
          {{- else if and (ne .DictType "") (eq "radio" .HtmlType) }}
          <Radio.Group>
            {{ "{" }}Array.from({{.JsonField}}Options).map(([dictValue, dictLabel]) => (
              <Radio key={dictValue} value={dictValue}>
                {dictLabel}
              </Radio>
            )){{ "}" }}
          </Radio.Group>
          {{- end }}
        </Form.Item>
        {{- end }}
        {{- end }}
      </Form>
    </Modal>
  );
});

export default FormModal;
